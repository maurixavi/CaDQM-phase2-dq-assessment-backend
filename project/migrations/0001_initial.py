# Generated by Django 5.0.6 on 2025-07-26 20:14

import django.contrib.auth.models
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
        ('dqmodel', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='ContextComponent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'context_component',
            },
        ),
        migrations.CreateModel(
            name='DataAtHand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='Database Name')),
                ('description', models.TextField(blank=True, null=True, verbose_name='Database Description')),
                ('date', models.DateField(blank=True, help_text='Fecha real cuando se creó la base de datos (no cuando se registró aquí)', null=True, verbose_name='Database Date')),
                ('url_db', models.CharField(max_length=255, verbose_name='Database URL or Host')),
                ('user_db', models.CharField(max_length=255, verbose_name='Database User')),
                ('pass_db', models.CharField(max_length=255, verbose_name='Database Password')),
                ('port', models.IntegerField(blank=True, default=5432, null=True, verbose_name='Port')),
                ('type', models.CharField(choices=[('postgresql', 'PostgreSQL'), ('mysql', 'MySQL'), ('sqlite', 'SQLite'), ('oracle', 'Oracle'), ('mssql', 'SQL Server'), ('other', 'Other')], default='postgresql', max_length=50, verbose_name='Database Type')),
            ],
            options={
                'db_table': 'data_at_hand',
            },
        ),
        migrations.CreateModel(
            name='Estimation',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('result', models.JSONField()),
                ('manual_facts', models.JSONField(blank=True, default=list)),
                ('date', models.DateField(auto_now_add=True)),
            ],
            options={
                'db_table': 'estimation',
            },
        ),
        migrations.CreateModel(
            name='FileType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'file_type',
            },
        ),
        migrations.CreateModel(
            name='QualityProblem',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('date', models.DateField()),
            ],
            options={
                'db_table': 'quality_problem',
            },
        ),
        migrations.CreateModel(
            name='UserData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
            ],
            options={
                'db_table': 'user_data',
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('type', models.CharField(blank=True, max_length=50)),
                ('description', models.TextField(blank=True)),
                ('username', models.CharField(blank=True, max_length=150, null=True, unique=True)),
                ('groups', models.ManyToManyField(blank=True, related_name='custom_user_groups', to='auth.group')),
                ('user_permissions', models.ManyToManyField(blank=True, related_name='custom_user_permissions', to='auth.permission')),
            ],
            options={
                'db_table': 'user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='ApplicationDomain',
            fields=[
                ('contextcomponent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='project.contextcomponent')),
                ('description', models.TextField()),
            ],
            options={
                'db_table': 'application_domain',
            },
            bases=('project.contextcomponent',),
        ),
        migrations.CreateModel(
            name='BusinessRule',
            fields=[
                ('contextcomponent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='project.contextcomponent')),
                ('statement', models.TextField()),
                ('semantic', models.TextField()),
            ],
            options={
                'db_table': 'business_rule',
            },
            bases=('project.contextcomponent',),
        ),
        migrations.CreateModel(
            name='DQMetadata',
            fields=[
                ('contextcomponent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='project.contextcomponent')),
                ('path', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('measurement', models.TextField()),
            ],
            options={
                'db_table': 'dq_metadata',
            },
            bases=('project.contextcomponent',),
        ),
        migrations.CreateModel(
            name='OtherData',
            fields=[
                ('contextcomponent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='project.contextcomponent')),
                ('path', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('owner', models.CharField(max_length=255)),
            ],
            options={
                'db_table': 'other_data',
            },
            bases=('project.contextcomponent',),
        ),
        migrations.CreateModel(
            name='OtherMetadata',
            fields=[
                ('contextcomponent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='project.contextcomponent')),
                ('path', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('author', models.CharField(max_length=255)),
                ('last_update', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'other_metadata',
            },
            bases=('project.contextcomponent',),
        ),
        migrations.CreateModel(
            name='SystemRequirement',
            fields=[
                ('contextcomponent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='project.contextcomponent')),
                ('statement', models.TextField()),
                ('description', models.TextField()),
            ],
            options={
                'db_table': 'system_requirement',
            },
            bases=('project.contextcomponent',),
        ),
        migrations.CreateModel(
            name='UserType',
            fields=[
                ('contextcomponent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='project.contextcomponent')),
                ('name', models.CharField(max_length=255)),
                ('characteristics', models.TextField()),
            ],
            options={
                'db_table': 'user_type',
            },
            bases=('project.contextcomponent',),
        ),
        migrations.CreateModel(
            name='Context',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('version', models.CharField(max_length=50)),
                ('context_components', models.ManyToManyField(related_name='related_contexts', to='project.contextcomponent')),
                ('previous_version', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='next_versions', to='project.context')),
            ],
            options={
                'db_table': 'context',
            },
        ),
        migrations.CreateModel(
            name='DataSchema',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('schema', models.JSONField()),
                ('data_at_hand', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='data_schema', to='project.dataathand')),
            ],
            options={
                'db_table': 'data_schema',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('description', models.TextField()),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('context', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='projects', to='project.context')),
                ('data_at_hand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='project.dataathand')),
                ('dqmodel_version', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='dqmodel.dqmodel')),
                ('estimation', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='project', to='project.estimation')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='projects', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'project',
            },
        ),
        migrations.CreateModel(
            name='DataProfiling',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('description', models.TextField()),
                ('type', models.CharField(max_length=50)),
                ('result', models.JSONField()),
                ('date', models.DateTimeField()),
                ('context_components', models.ManyToManyField(blank=True, related_name='data_profilings', to='project.contextcomponent')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_profilings', to='project.project')),
            ],
            options={
                'db_table': 'data_profiling',
            },
        ),
        migrations.CreateModel(
            name='ProjectStage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stage', models.CharField(choices=[('ST1', 'ST1'), ('ST2', 'ST2'), ('ST3', 'ST3'), ('ST4', 'ST4'), ('ST5', 'ST5'), ('ST6', 'ST6')], max_length=100)),
                ('status', models.CharField(choices=[('TO_DO', 'To Do'), ('IN_PROGRESS', 'In Progress'), ('DONE', 'Done')], default='TO_DO', max_length=50)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='stages', to='project.project')),
            ],
            options={
                'db_table': 'project_stage',
                'ordering': ['stage'],
                'unique_together': {('project', 'stage')},
            },
        ),
        migrations.AddField(
            model_name='contextcomponent',
            name='project_stage',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='context_components', to='project.projectstage'),
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('type', models.CharField(max_length=50)),
                ('created_at', models.DateField()),
                ('data', models.TextField(blank=True, null=True)),
                ('rejected_suggestions', models.TextField(blank=True, null=True)),
                ('context_components', models.ManyToManyField(blank=True, related_name='reviews', to='project.contextcomponent')),
                ('project', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='reviews', to='project.project')),
                ('quality_problems', models.ManyToManyField(blank=True, related_name='related_reviews', to='project.qualityproblem')),
                ('user', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='reviews', to='project.userdata')),
            ],
            options={
                'db_table': 'review',
            },
        ),
        migrations.AddField(
            model_name='qualityproblem',
            name='reviews',
            field=models.ManyToManyField(blank=True, related_name='related_quality_problems', to='project.review'),
        ),
        migrations.CreateModel(
            name='UploadedFile',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('file', models.FileField(upload_to='uploads/')),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('analysis', models.TextField(blank=True, null=True)),
                ('description', models.TextField(blank=True, null=True)),
                ('file_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='uploaded_files', to='project.filetype')),
                ('review', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='uploaded_files', to='project.review')),
            ],
            options={
                'db_table': 'uploaded_file',
            },
        ),
        migrations.CreateModel(
            name='TaskAtHand',
            fields=[
                ('contextcomponent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='project.contextcomponent')),
                ('name', models.CharField(max_length=255)),
                ('purpose', models.TextField()),
                ('other_data', models.ManyToManyField(blank=True, related_name='tasks_at_hand', to='project.otherdata')),
                ('system_requirements', models.ManyToManyField(blank=True, related_name='tasks_at_hand', to='project.systemrequirement')),
                ('user_types', models.ManyToManyField(blank=True, related_name='tasks_at_hand', to='project.usertype')),
            ],
            options={
                'db_table': 'task_at_hand',
            },
            bases=('project.contextcomponent',),
        ),
        migrations.CreateModel(
            name='DataFiltering',
            fields=[
                ('contextcomponent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='project.contextcomponent')),
                ('statement', models.TextField()),
                ('description', models.TextField()),
                ('task_at_hand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='data_filterings', to='project.taskathand')),
            ],
            options={
                'db_table': 'data_filtering',
            },
            bases=('project.contextcomponent',),
        ),
        migrations.AddField(
            model_name='userdata',
            name='user_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_data', to='project.usertype'),
        ),
        migrations.CreateModel(
            name='DQRequirement',
            fields=[
                ('contextcomponent_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='project.contextcomponent')),
                ('statement', models.TextField()),
                ('description', models.TextField()),
                ('data_filtering', models.ManyToManyField(blank=True, related_name='dq_requirements', to='project.datafiltering')),
                ('user_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='dq_requirements', to='project.usertype')),
            ],
            options={
                'db_table': 'dq_requirement',
            },
            bases=('project.contextcomponent',),
        ),
        migrations.CreateModel(
            name='QualityProblemProject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('priority', models.CharField(choices=[('High', 'High'), ('Medium', 'Medium'), ('Low', 'Low')], default='Medium', max_length=10)),
                ('is_selected', models.BooleanField(default=False)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='project_problems', to='project.project')),
                ('quality_problem', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='problem_projects', to='project.qualityproblem')),
            ],
            options={
                'db_table': 'quality_problem_project',
                'unique_together': {('quality_problem', 'project')},
            },
        ),
    ]
